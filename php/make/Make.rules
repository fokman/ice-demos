# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# **********************************************************************

#
# Determines whether the extension uses PHP namespaces (requires
# PHP 5.3 or later).
#
#USE_NAMESPACES          ?= yes

# ----------------------------------------------------------------------
# Don't change anything below this line!
# ----------------------------------------------------------------------

#
# Common definitions
#
ice_language     = php
slice_translator = slice2php

SHELL		= /bin/sh
VERSION_MAJOR   = 3
VERSION_MINOR   = 6
VERSION_PATCH   = 3
VERSION         = 3.6.3
SHORT_VERSION   = 3.6
SOVERSION	= 36

OBJEXT		= .o

UNAME		:= $(shell uname)
MACHINE_TYPE	:= $(shell uname -m)

#
# Ensure ice_language has been set by the file that includes this one.
#
ifndef ice_language
$(error ice_language must be defined)
endif

ifeq ($(UNAME),Darwin)
    usr_dir = /usr/local
else
    usr_dir = /usr
endif

ifeq ($(UNAME),SunOS)
    ifeq ($(MACHINE_TYPE),sun4u)
       lp64suffix	= /64
       lp64binsuffix	= /sparcv9
    endif
    ifeq ($(MACHINE_TYPE),sun4v)
       lp64suffix       = /64
       lp64binsuffix    = /sparcv9
    endif
    ifeq ($(MACHINE_TYPE),i86pc)
	lp64suffix	= /amd64
	lp64binsuffix	= /amd64
    endif
endif

ifeq ($(UNAME),Linux)
   ifeq ($(MACHINE_TYPE),x86_64)
      #
      # Ubuntu.
      #
      ifeq ($(shell test -d $(usr_dir)/lib/x86_64-linux-gnu && echo 0),0)
         lp64suffix	= /x86_64-linux-gnu
      endif

      #
      # Rhel/SLES
      #
      ifeq ($(shell test -d $(usr_dir)/lib64 && echo 0),0)
          lp64suffix	= 64
      endif

      ifeq ($(LP64),)
          LP64      	= yes
      endif
   endif
   ifneq ($(STATICLIBS),yes)
      ifneq ($(LP64),yes)
	      binsuffix     = 32
      endif
   endif
endif

ifeq ($(shell test -d $(usr_dir)/lib/i386-linux-gnu && echo 0),0)
    lp32suffix     = /i386-linux-gnu
endif

ifeq ($(CPP11),yes)
    ifneq ($(UNAME),Darwin)
        cpp11libdirsuffix	= /c++11
        cpp11libsuffix		= ++11
        cpp11sonamedir		= ../
        binsuffix 		:= $(binsuffix)$(cpp11libsuffix)
    endif
endif

ifeq ($(LP64),yes)
	libsubdir		:= lib$(lp64suffix)
    binsubdir		:= bin$(lp64binsuffix)
else
	libsubdir		:= lib$(lp32suffix)
	binsubdir		:= bin
    #
    # For x86 builds in x86_64 machines lib64subdir points to the x86_64 lib
    # directory and libsubdir to the x86 lib directory.
    #
	ifeq ($(MACHINE_TYPE),x86_64)
		ifeq ($(UNAME),Linux)
			ifeq ($(shell test -d $(usr_dir)/lib/x86_64-linux-gnu && echo 0),0)
				lib64subdir               = lib/x86_64-linux-gnu
			else
				lib64subdir               = lib$(lp64suffix)
			endif
		endif
	endif
endif

#
# The following variables might also be defined:
#
# - slice_translator: the name of the slice translator required for the build.
#   Setting this variable is required when building source trees other than the
#   the source distribution (e.g.: the demo sources).
#
ifeq ($(ICE_HOME),)
    #
    # /usr or /usr/local install.
    #
    ifndef slice_translator
$(error slice_translator must be defined)
    endif

    ifneq ($(shell test -f $(usr_dir)/bin/$(slice_translator) && echo 0), 0)
$(error Unable to find a valid Ice distribution, please verify ICE_HOME is properly configured and Ice is correctly installed.)
    endif

    ice_dir = $(usr_dir)
    ice_cpp_dir = $(ice_dir)
else
    #
    # Two cases here. Either an /opt style install, or a source tree.
    #
    ice_dir = $(ICE_HOME)
    ifeq ($(shell test -f $(ICE_HOME)/$(binsubdir)/$(slice_translator) && echo 0), 0)
        ice_cpp_dir = $(ice_dir)
    else
        ifeq ($(shell test -f $(ice_dir)/cpp/bin/$(slice_translator) && echo 0), 0)
            ice_src_dist = 1
            ice_cpp_dir = $(ice_dir)/cpp
        else
$(error Unable to find $(slice_translator) in $(ICE_HOME)/$(binsubdir), please verify ICE_HOME is properly configured and Ice is correctly installed.)
        endif
    endif
endif

#
# Set slicedir to the path of the directory containing the Slice files.
#
ifeq ($(ice_dir), $(usr_dir))
    slicedir = $(usr_dir)/share/slice
else
    slicedir = $(ice_dir)/slice
endif

#
# TODO: Should this be:
# $(ice_dir)/$(libsubdir)$(cpp11libdirsuffix)
#
ifdef ice_src_dist
    ice_lib_dir = $(ice_cpp_dir)/$(libsubdir)
    ice_bin_dir = $(ice_cpp_dir)/$(binsubdir)
else
    ifdef lib64subdir
        ice_lib_dir = $(ice_dir)/$(lib64subdir)
        ice_bin_dir = $(ice_dir)/$(bin64subdir)
    else
        ice_lib_dir = $(ice_dir)/$(libsubdir)
        ice_bin_dir = $(ice_dir)/$(binsubdir)
    endif
endif

#
# Set environment variables for the Slice translator.
#
ifneq ($(ice_dir), $(usr_dir))
    #
    # We always set library path because the build needs to work
    # whe slice compiler was built without RPATH
    #
    ifeq ($(UNAME),Linux)
        export LD_LIBRARY_PATH := $(ice_lib_dir):$(LD_LIBRARY_PATH)
    endif

    ifeq ($(UNAME),Darwin)
        export DYLD_LIBRARY_PATH := $(ice_lib_dir):$(DYLD_LIBRARY_PATH)
    endif

    ifeq ($(UNAME),SunOS)
        ifeq ($(LP64),yes)
            export LD_LIBRARY_PATH_64 := $(ice_lib_dir):$(LD_LIBRARY_PATH_64)
        else
            export LD_LIBRARY_PATH := $(ice_lib_dir):$(LD_LIBRARY_PATH)
		endif
    endif

    ifeq ($(UNAME),FreeBSD)
        export LD_LIBRARY_PATH := $(ice_lib_dir):$(LD_LIBRARY_PATH)
    endif
endif

all::

ICECPPFLAGS		= -I$(slicedir)
SLICE2PHPFLAGS		= $(ICECPPFLAGS)

ifeq ("$(USE_NAMESPACES)","yes")
    SLICE2PHPFLAGS      := $(SLICE2PHPFLAGS) -n
endif

ifdef ice_src_dist
    ifeq ($(ice_cpp_dir), $(ice_dir)/cpp)
        SLICE2PHP 	= $(ice_cpp_dir)/bin/slice2php
    else
        SLICE2PHP 	= $(ice_cpp_dir)/$(binsubdir)/slice2php
    endif
else
    SLICE2PHP 		= $(ice_dir)/$(binsubdir)/slice2php
endif

EVERYTHING		= all clean

.SUFFIXES:		.ice .php

all:: $(SLICE_SRCS:.ice=.php)

clean::
	rm -f $(SLICE_SRCS:.ice=.php)

%.php: %.ice
	$(SLICE2PHP) $(SLICE2PHPFLAGS) $<
	@mkdir -p .depend
	@$(SLICE2PHP) $(SLICE2PHPFLAGS) --depend $< > .depend/$(*F).ice.d

include $(wildcard .depend/*.d)
